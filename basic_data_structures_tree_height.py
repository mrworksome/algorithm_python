
"""
Задача: Высота дерева
Вычислить высоту данного дерева.
Вход.
Корневое дерево с вершинами {0, . . . , n−1}, заданное как последовательность
parent0, . . . , parent(n−1), где parent(i) — родитель i-й вершины.
Выход. Высота дерева.
Деревья имеют огромное количество при- менений в Computer Science.
Они используются как для представления данных, так и во многих алгоритмах
машинного обучения. Далее мы также узнаем, как сбалансированные деревья
используются для реализации словарей и ассоциативных массивов.
Данные структуры данных так или иначе используются во всех языках
программирования и базах данных.

Ваша цель в данной задаче — научиться хранить и эффективно обрабатывать деревья,
даже если в них сотни тысяч вершин.

Формата входа.
Первая строка содержит натуральное число n.

Вторая строка содержит n целых чисел parent0, . . . , parent(n−1).
Для каждого 0 ≤ i ≤ n − 1, parent(i) — родитель вершины i;
если parent(i) = −1, то i является корнем.
Гарантируется, что корень ровно один.
Гарантируется, что данная последовательность задаёт дерево.

Формат выхода.
Высота дерева. Ограничения. 1 ≤ n ≤ 10**5.

Sample Input:
10
9 7 5 5 2 9 9 9 2 -1

Sample Output:
4
"""


def tree_height_bottom_up(parents):
    depth = [-1] * len(parents) + [0]

    def count_depth(i):
        if depth[i] == -1:
            depth[i] = count_depth(parents[i]) + 1
        return depth[i]

    return max(count_depth(i) for i in range(len(parents)))


def main():
    n_ = input()
    parents = [int(i) for i in input().split()]

    print(tree_height_bottom_up(parents))


if __name__ == "__main__":
    main()
